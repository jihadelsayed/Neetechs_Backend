"""
Django settings for Neetechs project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
import re

from decouple import config
from firebase_admin import credentials, initialize_app
from rest_framework.settings import api_settings
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

# secrets
SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", default=False, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")

AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")

STRIPE_PUBLIC_KEY = config("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")

GITHUB_WEBHOOK_SECRET = config("GITHUB_WEBHOOK_SECRET")

# this choese will allow access to admin page but lets not activated it
# CSRF_TRUSTED_ORIGINS = ['https://neetechs.azurewebsites.net/']

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS", cast=lambda v: [s.strip() for s in v.split(",")]
)
CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-device-id",
]

CHAT_WS_HOSTS = config("CHAT_WS_HOSTS", cast=lambda v: [s.strip() for s in v.split(",")])


CHAT_WS_SERVER_PORT = 5002
CHAT_WS_SERVER_PROTOCOL = "ws" or "wss"
CORS_ORIGIN_ALLOW_ALL = (
    True  # If this is used then `CORS_ORIGIN_WHITELIST` will not have any effect
)
CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    # main
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    #'django.contrib.sites',
    # json converter
    "rest_framework",
        "drf_spectacular",

    "rest_framework.authtoken",
    # authontication
    #'dj_rest_auth',
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.facebook",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.twitter",
    "knox",
    "knox_allauth.apps.KnoxAllauthConfig",
    # websocket
    "channels",
    "fcm_django",
    # swaggar open api
    # app
    "chat",
    "stripe",
    "Profile",
    "Service",
    "Checkout",
    "home",
    "report",
    "Category",

]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Neetechs.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'knox_allauth.backends.EmailOrPhoneBackend',  # <-- this is your new backend
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("knox.auth.TokenAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    "PAGE_SIZE": 17,
}
# ASGI_APPLICATION = "routing.application"

ASGI_APPLICATION = "Neetechs.routing.application"
# WSGI_APPLICATION = 'Neetechs.wsgi.application'


REST_AUTH_TOKEN_MODEL = "knox.models.AuthToken"
REST_AUTH_TOKEN_CREATOR = "knox_allauth.utils.create_knox_token"


REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "knox_allauth.serializer.UserSerializer",
    "TOKEN_SERIALIZER": "knox_allauth.serializer.KnoxSerializer",
}
REST_AUTH_SERIALIZERS["LOGIN_SERIALIZER"] = "knox_allauth.serializer.PhoneOrEmailLoginSerializer"

CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default="5432"),
    }
}
# set this to False if you want to turn off pyodbc's connection pooling
DATABASE_CONNECTION_POOLING = False

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/



##########static##########################
STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


############media###############    #
MEDIA_ROOT = os.path.join(BASE_DIR, "media_cdn")
MEDIA_URL = "/media/"

# TEMP = os.path.join(BASE_DIR, 'temp')

# os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

# os.environ["GOOGLE_APPLICATION_CREDENTIALS"]="credentials.json"


SITE_ID = 1
AUTH_USER_MODEL = "knox_allauth.CustomUser"
# AUTH_USERName_MODEL = "knox_allauth.CustomUser.username"
# AUTH_SiteId_MODEL = "knox_allauth.CustomUser.site_id"

#ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_AUTHENTICATION_METHOD = "email"

ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

if DEBUG:
    EMAIL_BACKEND = (
        "django.core.mail.backends.console.EmailBackend"  # During development only
    )
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

DATE_INPUT_FORMATS = [
    "%Y-%m-%d",
    "%Y-%m-%d %H:%M",
    "%Y-%m-%d %I:%M %p",
]

AWS_S3_HOST = "s3.eu-north-1.amazonaws.com"
AWS_S3_REGION_NAME = "eu-north-1"

AWS_STORAGE_BUCKET_NAME = "neetechss3"
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
STATICFILES_STORAGE = "storages.backends.s3boto3.S3StaticStorage"

# stops IK checking S3 all the time - main reason to use IK v2 for me
IMAGEKIT_DEFAULT_IMAGE_CACHE_BACKEND = (
    "imagekit.imagecache.NonValidatingImageCacheBackend"
)

EMAIL_USE_TLS = False
EMAIL_HOST = "smtp.titan.email"
DEFAULT_FROM_EMAIL = "noreply@neetechs.com"
SERVER_EMAIL = "noreply@neetechs.com"
EMAIL_PORT = 465

EMAIL_USE_SSL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
APPEND_SLASH = False

STRIPE_WEBHOOK_SECRET = ""
# STRIPE_LIVE_MODE = False  # Change to True in production
# DJSTRIPE_WEBHOOK_SECRET = ""
# DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"
# STRIPE_TEST_SECRET_KEY = ""
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=604800",
}

REST_KNOX = {
    #'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
    #'AUTH_TOKEN_CHARACTER_LENGTH': 64,
    "TOKEN_TTL": timedelta(hours=100),
    #'USER_SERIALIZER': 'knox.serializers.UserSerializer',
    #'TOKEN_LIMIT_PER_USER': None,
    #'AUTO_REFRESH': False,
    # 'EXPIRY_DATETIME_FORMAT': api_settings.DATETME_FORMAT,
}

DRF_RECAPTCHA_SECRET_KEY = "6LcCZTkbAAAAAJZgnFuDO8LOv9YyXtXuAhORmZdl"

SOCIAL_AUTH_TWITTER_KEY = "gS3cTehMYgqyaGM8XRzmn7hzs"
SOCIAL_AUTH_TWITTER_SECRET = "7G45UCpjFZOYEK916Vd6GjSpewVCMM4Xd58g9vE1Qdn32vBG9q"
SOCIAL_AUTH_TWITTER_TOKEN = "AAAAAAAAAAAAAAAAAAAAAIgHRAEAAAAACRBSw%2BqI7jZrGPcqLixn481Y1wo%3D6wvAJYwtlIplhHxJFLDL0zuvje8nEq6LTEsuAtVAlNuu151opP"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
# 6LcCZTkbAAAAAP-DG83osmudRcjDkVGVdC08pega
# 6LcCZTkbAAAAAJZgnFuDO8LOv9YyXtXuAhORmZdl
SPECTACULAR_SETTINGS = {
    "TITLE": "Neetechs API",
    "DESCRIPTION": "OpenAPI for Neetechs Platform",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

TWILIO_ACCOUNT_SID = config("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = config("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = config("TWILIO_PHONE_NUMBER")
from .logging_config import LOGGING

