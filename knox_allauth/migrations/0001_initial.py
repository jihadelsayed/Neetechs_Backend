# Generated by Django 5.2.7 on 2025-10-05 03:43

import django.core.validators
import django.utils.timezone
import imagekit.models.fields
import knox_allauth.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(default=knox_allauth.models._create_hash, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='name')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='first name')),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('sms', models.CharField(blank=True, max_length=15, null=True)),
                ('site_id', models.CharField(db_index=True, default=knox_allauth.models._create_hash, max_length=50)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_creator', models.BooleanField(default=False)),
                ('profile_completed', models.BooleanField(default=False)),
                ('bio', models.CharField(blank=True, max_length=500, null=True)),
                ('rating', models.DecimalField(decimal_places=1, default=0, max_digits=2, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('members', models.IntegerField(default=0)),
                ('followers', models.IntegerField(default=0)),
                ('earning', models.IntegerField(default=0)),
                ('profession', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('member_since', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('picture', imagekit.models.fields.ProcessedImageField(blank=True, default='ProfileDefaultImage.png', null=True, upload_to=knox_allauth.models.upload_path)),
                ('picture_medium', imagekit.models.fields.ProcessedImageField(blank=True, default='ProfileDefaultImage.png', null=True, upload_to=knox_allauth.models.upload_path)),
                ('picture_small', imagekit.models.fields.ProcessedImageField(blank=True, default='ProfileDefaultImage.png', null=True, upload_to=knox_allauth.models.upload_path)),
                ('picture_tag', imagekit.models.fields.ProcessedImageField(blank=True, default='ProfileDefaultImage.png', null=True, upload_to=knox_allauth.models.upload_path)),
                ('address1', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 1')),
                ('address2', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 2')),
                ('zip_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='Postal Code')),
                ('city', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Municipality')),
                ('state', models.CharField(blank=True, max_length=1024, null=True, verbose_name='County/State')),
                ('country', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Country')),
                ('facebook_link', models.CharField(blank=True, max_length=120, null=True)),
                ('twitter', models.CharField(blank=True, max_length=120, null=True)),
                ('linkedin_link', models.CharField(blank=True, max_length=120, null=True)),
                ('other_social_media', models.CharField(blank=True, max_length=120, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=120, null=True)),
                ('subscription_type', models.CharField(default='groundplan', max_length=20, verbose_name='Subscription type')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('about', models.TextField(default='The user did not put any thing yet', max_length=120, verbose_name='About me')),
                ('phone_otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', knox_allauth.models.UserManager()),
            ],
        ),
    ]
