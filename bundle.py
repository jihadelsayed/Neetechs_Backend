# bundle.py — self-contained Django single file
# Generated by PowerShell packer
import os, sys, tempfile, base64, zipfile, shutil, runpy, importlib

B64_ZIP = """"""
DEFAULT_MANAGE_CMD = "runserver 127.0.0.1:8000"
DEFAULT_SETTINGS = "Neetechs.settings"

def _extract_to_temp():
    tmp = tempfile.mkdtemp(prefix="dj_bundle_")
    bin = base64.b64decode(B64_ZIP.encode("ascii"))
    zf_path = os.path.join(tmp, "app.zip")
    with open(zf_path, "wb") as f:
        f.write(bin)
    with zipfile.ZipFile(zf_path, "r") as zf:
        zf.extractall(tmp)
    return tmp

def main():
    # Unpack bundle
    root = _extract_to_temp()
    sys.path.insert(0, root)

    # If project has a manage.py, use it. Otherwise, fall back to Django entry.
    manage_py = None
    # try top-level manage.py
    cand = os.path.join(root, "manage.py")
    if os.path.exists(cand):
        manage_py = cand
    else:
        # search shallow (avoid walking big trees)
        for name in os.listdir(root):
            p = os.path.join(root, name, "manage.py")
            if os.path.exists(p):
                manage_py = p
                break

    # Set settings if user provided via env/arg, else default
    if "DJANGO_SETTINGS_MODULE" not in os.environ:
        os.environ["DJANGO_SETTINGS_MODULE"] = DEFAULT_SETTINGS

    if manage_py:
        # emulate: python manage.py <args...>
        args = sys.argv[1:] or DEFAULT_MANAGE_CMD.split()
        sys.argv = [manage_py] + args
        # Execute manage.py in its own globals
        runpy.run_path(manage_py, run_name="__main__")
    else:
        # Fallback to core management if no manage.py found
        from django.core.management import execute_from_command_line
        argv0 = "bundle.py"
        args = sys.argv[1:] or DEFAULT_MANAGE_CMD.split()
        execute_from_command_line([argv0] + args)

if __name__ == "__main__":
    try:
        main()
    finally:
        # Optionally keep extracted files:
        # pass
        # Clean up temp dir parent
        pass
